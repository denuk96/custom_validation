exit
user.valid?
exit
user.valid?
user.methods
exit
!@errors.empty?
@errors.empty?
@errors
exit
validator
validator[0]
validator
exit
self
exit
base.validators
base
exit
base
exit
base
exit
self.class.validators
exit
user.validate!
exit
user.validate!
exit
user.validate!ex
user.validate!
exit
user.validate!
user.validate
exit
user.validate!
exit
base
exit
ValidationMethods.methods
exit
user.validate!
exit
exut
exit
User.validators
User.validators\
exit
User.validators
exit
User.validators
exit
exot
self.validators
self.new.validators
exit
self.validators
self.new.validators
self.validators,
self.instance_methods
self
@validators
exit
self.new.validators
self.instance_methods
self.instances
self
exit
user.validators
user
exit
self.new.a
self.new
self.instance_eval do @a = 1 end 
self.new.a
self.a
self
self.class_eval do @a = 1 end
self.define_
self.define
self
exit
user.validators
exit
user
exit
self.methods
self
exit
args[:value].class == args[:valid_condition]
args
exit
!!regex.match(args[:value])
exit
!!regex.match(args[:value])
exit
args[:value].scan(regex).empty?
!!regex.match(args[:value])
exit
args
args[:value]
args[:value].scan(regex).empty?
exit
args[:value]
!!regex.match(args[:value])
!!regex.match args[:value]
regex = args[:valid_condition]
!!regex.match(args[:value])
!!regex.match args[:value]
exit
regex.match(args[:value])
regex = args[:valid_condition]
args
exit
self.errors
self.errors << '123'
[A
self
exit
klass.methods
klass
self
exit
self.errors << '1'
self.errors
self
exit
self
exit
self
exit
result_valid
exit
args[:valid_condition].class
args[:valid_condition]
args
is_present = value.nil? || value.empty?
value = args[:value]
args
exit
args
exit
self.send(args[:method])
self.send args[:method].to_s
self.send args[:method]
send args[:method]
args[:method]
args
self.send args[:method]
self.send args[:presence]
self.send args[:presence] 
send
self
args
exit
ValidationMethods.private_instance_methodse
ValidationMethods.private_instance_methods
ValidationMethods.instance_methods
ValidationMethods.methods
ValidationMethods.private_methods
ValidationMethods.methods
exit
''.empty?
value.nil?
value = args[:value
args
agrs
exit
args
exit
ValidationMethods.singleton_method
ValidationMethods.singleton_methods
ValidationMethods.methods
ValidationMethods.methods.include? validator_name
validator_name
exit
valid_condition
exit
validator
condition
exit
ValidationMethods.methods.include?(name)
ValidationMethods.method_defined
ValidationMethods.method_defined? name
ValidationMethods.
ValidationMethods
exit
name
exit
ValidationMethods.public_instance_methods]
ValidationMethods.public_instance_methods
exit
ValidationMethods.public_instance_methods
ValidationMethods.methods
exit
self.instance_variable_defined? "@#{field}"
self.instance_variable_defined? "@#{field}
self.instance_variable_defined?
self.instance_variable_defined? field
self.instance_variables
self.instance_variables,
self.methods
validator.keys[0] 
validator[0]
validator.key
validator
exit
condition
self.send 'bla'
!! self.send field
!self.send field
!!self.send field
valid_instance? field
field
exit
args[:email]
args[:email[
args
*args
exit
args.extract_options!
args
exit
args
exit
options = args.extract_options!
args
*args
args
exit
args[:email]
args
exit
args.fetch(:email)
args
exit
args[0]
args
